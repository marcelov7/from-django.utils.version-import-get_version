#!/usr/bin/env python3
"""
Script SIMPLES para corrigir o banco de produ√ß√£o PostgreSQL
Execute este script para criar as tabelas e usu√°rios no banco hospedado
"""

import os
import sys

def main():
    print("üîß Corre√ß√£o R√°pida do Banco de Produ√ß√£o")
    print("=" * 50)
    
    # Configurar vari√°veis de ambiente para produ√ß√£o
    print("üìù Configurando conex√£o com PostgreSQL...")
    
    os.environ['DJANGO_SETTINGS_MODULE'] = 'relatorio_system.settings'
    os.environ['ENVIRONMENT'] = 'production'
    os.environ['DEBUG'] = 'False'
    os.environ['DB_NAME'] = 'dbrelatorio_rqkg'
    os.environ['DB_USER'] = 'dbrelatorio_rqkg_user'
    os.environ['DB_PASSWORD'] = 'CJZUYC4FeqPg3FfSZDVu75oSaXhpzPwV'
    os.environ['DB_HOST'] = 'dpg-d10oti95pdvs73acede0-a.oregon-postgres.render.com'
    os.environ['DB_PORT'] = '5432'
    os.environ['SECRET_KEY'] = 'temp-migration-key-12345'
    os.environ['ALLOWED_HOSTS'] = '.onrender.com,localhost'
    
    # Inicializar Django
    import django
    django.setup()
    
    from django.core.management import call_command
    from django.contrib.auth import get_user_model
    
    User = get_user_model()
    
    try:
        print("\nüîÑ Executando migra√ß√µes...")
        call_command('makemigrations', verbosity=2)
        call_command('migrate', verbosity=2)
        print("‚úÖ Migra√ß√µes conclu√≠das!")
        
        print("\nüë§ Criando superusu√°rio admin...")
        if not User.objects.filter(username='admin').exists():
            admin = User.objects.create_superuser(
                username='admin',
                email='admin@sistema.com',
                password='admin123',
                first_name='Administrador',
                last_name='Sistema'
            )
            try:
                admin.departamento = 'TI'
                admin.cargo = 'Administrador'
                admin.is_manager = True
                admin.save()
            except:
                pass
            print("‚úÖ Admin criado: admin / admin123")
        else:
            print("‚ÑπÔ∏è Admin j√° existe")
        
        print("\nüìä Configurando dados iniciais...")
        call_command('setup_initial_data')
        
        print("\nüë• Criando usu√°rio de teste...")
        if not User.objects.filter(username='teste').exists():
            User.objects.create_user(
                username='teste',
                email='teste@sistema.com',
                password='teste123',
                first_name='Usu√°rio',
                last_name='Teste',
                departamento='Geral',
                cargo='Teste'
            )
            print("‚úÖ Usu√°rio teste criado: teste / teste123")
        else:
            print("‚ÑπÔ∏è Usu√°rio teste j√° existe")
        
        print("\nüéâ SUCESSO! Banco de produ√ß√£o configurado!")
        print("=" * 50)
        print("üîë Credenciais:")
        print("   Admin: admin / admin123")
        print("   Teste: teste / teste123")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        print("\nüí° Solu√ß√µes:")
        print("1. Verifique se o PostgreSQL est√° acess√≠vel")
        print("2. Confirme as credenciais do banco")
        print("3. Tente executar via Render Console")

if __name__ == "__main__":
    # Verificar se as depend√™ncias est√£o instaladas
    try:
        import psycopg2
    except ImportError:
        print("‚ùå ERRO: psycopg2-binary n√£o est√° instalado")
        print("Execute: pip install psycopg2-binary")
        sys.exit(1)
    
    main() 